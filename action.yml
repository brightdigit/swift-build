name: 'Build and Test'
description: 'Builds and tests a Swift package on the current platform'

inputs:
  type:
    description: 'Build type for Apple platforms (ios, watchos, visionos, tvos)'
    required: false
  xcode:
    description: 'Xcode version path for Apple platforms'
    required: false
  deviceName:
    description: 'Simulator device name for Apple platforms'
    required: false
  osVersion:
    description: 'Simulator OS version for Apple platforms'
    required: false

runs:
  using: "composite"
  steps:
    - name: Detect OS
      shell: bash
      id: detect-os
      run: |
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          echo "os=macos" >> $GITHUB_OUTPUT
        else
          echo "os=ubuntu" >> $GITHUB_OUTPUT
        fi

    # macOS specific steps
    - name: Set Xcode Name
      if: steps.detect-os.outputs.os == 'macos'
      shell: bash
      run: echo "XCODE_NAME=$(basename -- ${{ inputs.xcode }} | sed 's/\.[^.]*$//' | cut -d'_' -f2)" >> $GITHUB_ENV
    
    - name: Setup Xcode
      if: steps.detect-os.outputs.os == 'macos'
      shell: bash
      run: sudo xcode-select -s ${{ inputs.xcode }}/Contents/Developer
  
    - name: Set SDK and Platform
      if: steps.detect-os.outputs.os == 'macos' && inputs.type
      shell: bash
      run: |
        case ${{ inputs.type }} in
          ios)
            echo "PLATFORM=iOS Simulator" >> $GITHUB_ENV
            echo "SDK=iphonesimulator" >> $GITHUB_ENV
            ;;
          watchos)
            echo "PLATFORM=watchOS Simulator" >> $GITHUB_ENV
            echo "SDK=watchsimulator" >> $GITHUB_ENV
            ;;
          visionos)
            echo "PLATFORM=visionOS Simulator" >> $GITHUB_ENV
            echo "SDK=xrsimulator" >> $GITHUB_ENV
            ;;
          tvos)
            echo "PLATFORM=tvOS Simulator" >> $GITHUB_ENV
            echo "SDK=appletvsimulator" >> $GITHUB_ENV
            ;;
        esac

    - uses: irgaly/xcode-cache@v1
      if: steps.detect-os.outputs.os == 'macos' && inputs.type
      with:
        key: xcode-${{ runner.os }}-${{ env.XCODE_NAME }}-${{ hashFiles('Package.resolved') }}-${{ github.sha }}
        restore-keys: |
          xcode-${{ runner.os }}-${{ env.XCODE_NAME }}-${{ hashFiles('Package.resolved') }}-                        
          xcode-${{ runner.os }}-${{ env.XCODE_NAME }}-          

    # Ubuntu specific steps
    - name: Get Swift and OS versions
      if: steps.detect-os.outputs.os == 'ubuntu'
      shell: bash
      run: |
        SWIFT_VERSION=$(swift --version | head -n 1 | cut -d ' ' -f 3)
        OS_VERSION=$(. /etc/os-release && echo $VERSION_CODENAME)
        echo "SWIFT_VERSION=$SWIFT_VERSION" >> $GITHUB_ENV
        echo "OS_VERSION=$OS_VERSION" >> $GITHUB_ENV

    # Caching steps
    - name: Cache swift package modules (macOS)
      if: steps.detect-os.outputs.os == 'macos' && !inputs.type
      uses: actions/cache@v4
      with:
        path: .build
        key: spm-${{ runner.os }}-${{ env.XCODE_NAME }}-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          spm-${{ runner.os }}-${{ env.XCODE_NAME }}-

    - name: Cache swift package modules (Ubuntu)
      if: steps.detect-os.outputs.os == 'ubuntu'
      uses: actions/cache@v4
      with:
        path: .build
        key: spm-${{ env.OS_VERSION }}-${{ env.SWIFT_VERSION }}-${{ hashFiles('Package.resolved') }}

    # Build and test steps
    - name: Build and Test
      if: steps.detect-os.outputs.os == 'macos' && !inputs.type || steps.detect-os.outputs.os == 'ubuntu'
      shell: bash
      run: |
        swift build
        swift test --enable-code-coverage

    - name: Build and Test (macOS Device)
      if: steps.detect-os.outputs.os == 'macos' && inputs.type
      shell: bash
      run: >
        xcodebuild test
        -scheme SimulatorServices
        -sdk ${{ env.SDK }}
        -destination 'platform=${{ env.PLATFORM }},name=${{ inputs.deviceName }},OS=${{ inputs.osVersion }}'
        -enableCodeCoverage YES