name: Swift Package Tests

on:
  push

jobs:
  test-single-target-macos:
    name: Test Single Target Package (macOS)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          # SPM Build Matrix
          - runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            use-xcbeautify: "true"

          # macOS Build Matrix
          - type: macos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            use-xcbeautify: "true"

          # iOS Build Matrix
          - type: ios
            runs-on: macos-14
            xcode: "/Applications/Xcode_15.1.app"
            deviceName: "iPhone 15"
            osVersion: "17.5"

          - type: ios
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "iPhone 16 Pro"
            osVersion: "18.5"
            use-xcbeautify: "true"

          - type: ios
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "iPhone 17 Pro"
            osVersion: "26.0"
            download-platform: "true"
            use-xcbeautify: "true"
            xcbeautify-renderer: "azure-devops-pipelines"

          - type: watchos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "11.5"

          - type: watchos
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "Apple Watch Ultra 3 (49mm)"
            osVersion: "26.0"
            download-platform: "true"
            use-xcbeautify: "true"
            xcbeautify-renderer: "github-actions"

          - type: visionos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple Vision Pro"
            osVersion: "2.5"

          - type: tvos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "18.5"

          - type: tvos
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "26.0"
            download-platform: "true"
            use-xcbeautify: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/SingleTargetPackage
          scheme: SingleTargetPackage
          type: ${{ matrix.type }}
          xcode: ${{ matrix.xcode }}
          deviceName: ${{ matrix.deviceName }}
          osVersion: ${{ matrix.osVersion }}
          download-platform: ${{ matrix['download-platform'] || 'false' }}
          use-xcbeautify: ${{ matrix['use-xcbeautify'] }}
          xcbeautify-renderer: ${{ matrix['xcbeautify-renderer'] }}
          skip-package-resolved: "true"

  test-multi-target-macos:
    name: Test Multi-Target Package (macOS)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          # SPM Build Matrix
          - runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            use-xcbeautify: "true"
            xcbeautify-renderer: "github-actions"

          # macOS Build Matrix
          - type: macos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            use-xcbeautify: "true"  

          # iOS Build Matrix
          - type: ios
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "iPhone 16 Pro"
            osVersion: "18.5"
            use-xcbeautify: "true" 
            xcbeautify-renderer: "github-actions"

          - type: ios
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "iPhone 16 Pro"
            osVersion: "18.5"
            download-platform: "true"
            use-xcbeautify: "true" 
            xcbeautify-renderer: "azure-devops-pipelines"

          - type: watchos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "11.5"

          - type: watchos
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "11.5"
            download-platform: "true"
            use-xcbeautify: "true" 
            xcbeautify-renderer: "github-actions"

          - type: visionos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple Vision Pro"
            osVersion: "2.5"

          - type: tvos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "18.5"

          - type: tvos
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "26.0"
            download-platform: "true"
            use-xcbeautify: "true" 
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/MultiTargetPackage
          scheme: MultiTargetPackage-Package
          type: ${{ matrix.type }}
          xcode: ${{ matrix.xcode }}
          deviceName: ${{ matrix.deviceName }}
          osVersion: ${{ matrix.osVersion }}
          download-platform: ${{ matrix['download-platform'] || 'false' }}
          use-xcbeautify: ${{ matrix['use-xcbeautify'] }}
          xcbeautify-renderer: ${{ matrix['xcbeautify-renderer'] }}
          skip-package-resolved: "true"

  test-single-target-ubuntu:
    name: Test Single Target Package (Ubuntu)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift:
          - "5.9"
          - "5.10"
          - "6.0"
          - "6.1"
          - "6.2"
        ubuntu:
          - jammy
          - focal
          - noble
        nightly:
          - false
          - true
        exclude:
          - swift: 5.9
            ubuntu: noble
          - swift: 5.9
            nightly: true
          - swift: 5.10
            nightly: true
          - swift: 6.0
            nightly: true
          - swift: 6.2
            nightly: false
    container:
      image: ${{ matrix.nightly && format('swiftlang/swift:nightly-{0}-{1}', matrix.swift, matrix.ubuntu) || format('swift:{0}-{1}', matrix.swift, matrix.ubuntu) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/SingleTargetPackage
          scheme: SingleTargetPackage
          use-xcbeautify: "true"
          skip-package-resolved: "true" 

  test-multi-target-ubuntu:
    name: Test Multi-Target Package (Ubuntu)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift:
          - "5.9"
          - "5.10"
          - "6.0"
          - "6.1"
          - "6.2"
        ubuntu:
          - jammy
          - focal
          - noble
        nightly:
          - false
          - true
        exclude:
          - swift: 5.9
            ubuntu: noble
          - swift: 5.9
            nightly: true
          - swift: 5.10
            nightly: true
          - swift: 6.0
            nightly: true
          - swift: 6.2
            nightly: false
    container:
      image: ${{ matrix.nightly && format('swiftlang/swift:nightly-{0}-{1}', matrix.swift, matrix.ubuntu) || format('swift:{0}-{1}', matrix.swift, matrix.ubuntu) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/MultiTargetPackage
          scheme: MultiTargetPackage
          xcbeautify-renderer: "github-actions"
          skip-package-resolved: "true"
  test-single-target-windows:
    name: Test Single Target Package (Windows)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [windows-2022, windows-2025]
        include:
          - swift-version: swift-6.2-branch
            swift-build: 6.2-DEVELOPMENT-SNAPSHOT-2025-09-06-a
          - swift-version: swift-6.1-release
            swift-build: 6.1-RELEASE
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/SingleTargetPackage
          scheme: SingleTargetPackage
          windows-swift-version: ${{ matrix.swift-version }}
          windows-swift-build: ${{ matrix.swift-build }}
          use-xcbeautify: "true"
          skip-package-resolved: "true" 

  test-multi-target-windows:
    name: Test Multi-Target Package (Windows)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [windows-2022, windows-2025]
        include:
          - swift-version: swift-6.2-branch
            swift-build: 6.2-DEVELOPMENT-SNAPSHOT-2025-09-06-a
          - swift-version: swift-6.1-release
            swift-build: 6.1-RELEASE
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/MultiTargetPackage
          scheme: MultiTargetPackage-Package
          windows-swift-version: ${{ matrix.swift-version }}
          windows-swift-build: ${{ matrix.swift-build }}
          use-xcbeautify: "true"
          skip-package-resolved: "true"

  test-dependency-package-swift6:
    name: Test Dependency Package (Ubuntu, Swift 6.0+)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift:
          - "6.0"
          - "6.1"
          - "6.2"
        ubuntu:
          - jammy
          - noble
        nightly:
          - false
          - true
        exclude:
          - swift: 6.0
            nightly: true
          - swift: 6.1
            nightly: true
          - swift: 6.2
            nightly: false
    container:
      image: ${{ matrix.nightly && format('swiftlang/swift:nightly-{0}-{1}', matrix.swift, matrix.ubuntu) || format('swift:{0}-{1}', matrix.swift, matrix.ubuntu) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          use-xcbeautify: "true"

  test-dependency-package-swift5-strict:
    name: Test Dependency Package (Ubuntu, Swift 5.9 strict - EXPECTED TO FAIL)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift:
          - "5.9"
        ubuntu:
          - jammy
          - focal
    container:
      image: swift:${{ matrix.swift }}-${{ matrix.ubuntu }}
    steps:
      - uses: actions/checkout@v4
      - name: Test strict mode (expect failure)
        id: strict-test
        continue-on-error: true
        uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          use-xcbeautify: "true"
      - name: Verify test failed as expected
        if: always() && steps.strict-test.outcome == 'failure'
        run: |
          echo "Test failed as expected with Swift 5.9 and Package.resolved v3 incompatibility ✓"
      - name: Verify expected failure (not success)
        if: always() && steps.strict-test.outcome == 'success'
        run: |
          echo "ERROR: Expected strict mode to fail with Swift 5.9 and Package.resolved v3, but it succeeded"
          exit 1
      - name: Handle unexpected outcome
        if: always() && steps.strict-test.outcome != 'success' && steps.strict-test.outcome != 'failure'
        run: |
          echo "ERROR: Unexpected test outcome: ${{ steps.strict-test.outcome }}"
          exit 1

  test-dependency-package-swift510-strict:
    name: Test Dependency Package (Ubuntu, Swift 5.10 strict - EXPECTED TO SUCCEED)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu:
          - jammy
          - focal
    container:
      image: swift:5.10-${{ matrix.ubuntu }}
    steps:
      - uses: actions/checkout@v4
      - name: Test strict mode (expect success)
        uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          use-xcbeautify: "true"

  test-dependency-package-swift5-floating:
    name: Test Dependency Package (Ubuntu, Swift 5.x floating)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift:
          - "5.9"
          - "5.10"
        ubuntu:
          - jammy
          - focal
    container:
      image: swift:${{ matrix.swift }}-${{ matrix.ubuntu }}
    steps:
      - uses: actions/checkout@v4
      - name: Test floating mode (expect failure for 5.9, success for 5.10)
        id: floating-test
        continue-on-error: true
        uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          use-xcbeautify: "true"
          skip-package-resolved: "true"
      - name: Verify Swift 5.9 failed as expected
        if: always() && matrix.swift == '5.9' && steps.floating-test.outcome == 'failure'
        run: |
          echo "Test failed as expected with Swift 5.9 and Package.resolved v3 incompatibility ✓"
      - name: Verify Swift 5.10 succeeded as expected
        if: always() && matrix.swift == '5.10' && steps.floating-test.outcome == 'success'
        run: |
          echo "Test succeeded as expected with Swift 5.10 ✓"
      - name: Verify Swift 5.9 expected failure (not success)
        if: always() && matrix.swift == '5.9' && steps.floating-test.outcome == 'success'
        run: |
          echo "ERROR: Expected floating mode to fail with Swift 5.9 and Package.resolved v3, but it succeeded"
          exit 1
      - name: Verify Swift 5.10 expected success (not failure)
        if: always() && matrix.swift == '5.10' && steps.floating-test.outcome == 'failure'
        run: |
          echo "ERROR: Expected floating mode to succeed with Swift 5.10, but it failed"
          exit 1
      - name: Handle unexpected outcome
        if: always() && steps.floating-test.outcome != 'success' && steps.floating-test.outcome != 'failure'
        run: |
          echo "ERROR: Unexpected test outcome: ${{ steps.floating-test.outcome }}"
          exit 1

  test-dependency-package-windows:
    name: Test Dependency Package (Windows)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [windows-2022, windows-2025]
        include:
          - swift-version: swift-6.2-branch
            swift-build: 6.2-DEVELOPMENT-SNAPSHOT-2025-09-06-a
          - swift-version: swift-6.1-release
            swift-build: 6.1-RELEASE
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage-Package
          windows-swift-version: ${{ matrix.swift-version }}
          windows-swift-build: ${{ matrix.swift-build }}
          use-xcbeautify: "true"
          skip-package-resolved: "false"

  test-dependency-package-macos:
    name: Test Dependency Package (macOS)
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          xcode: "/Applications/Xcode_16.4.app"
          use-xcbeautify: "true"
          skip-package-resolved: "false"

  test-cache-behavior-strict:
    name: Test Cache Behavior (strict mode)
    runs-on: ubuntu-latest
    container:
      image: swift:6.1-jammy
    steps:
      - uses: actions/checkout@v4

      # First build with Package.resolved (strict mode)
      - name: First build (strict mode)
        uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          skip-package-resolved: "false"

      # Second build should hit cache
      - name: Second build (should hit cache)
        uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          skip-package-resolved: "false"

  test-cache-behavior-floating:
    name: Test Cache Behavior (floating mode)
    runs-on: ubuntu-latest
    container:
      image: swift:6.1-jammy
    steps:
      - uses: actions/checkout@v4

      # Remove Package.resolved for floating dependencies test
      - name: Remove Package.resolved
        run: rm -f test/DependencyPackage/Package.resolved

      # First build without Package.resolved (floating mode)
      - name: First build (floating mode)
        uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          skip-package-resolved: "true"

      # Second build should hit cache with 'no-resolved' key
      - name: Second build (should hit cache)
        uses: ./
        with:
          working-directory: test/DependencyPackage
          scheme: DependencyPackage
          skip-package-resolved: "true"
