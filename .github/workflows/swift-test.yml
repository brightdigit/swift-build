name: Swift Package Tests

on:
  push

jobs:
  test-single-target-macos:
    name: Test Single Target Package (macOS)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          # SPM Build Matrix
          - runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            use-xcbeautify: "true"
            skip-package-resolved: "true"

          # macOS Build Matrix
          - type: macos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            use-xcbeautify: "true"
            skip-package-resolved: "true"

          # iOS Build Matrix
          - type: ios
            runs-on: macos-14
            xcode: "/Applications/Xcode_15.1.app"
            deviceName: "iPhone 15"
            osVersion: "17.5"
            skip-package-resolved: "true"

          - type: ios
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "iPhone 16 Pro"
            osVersion: "18.5"
            use-xcbeautify: "true"
            skip-package-resolved: "true"

          - type: ios
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "iPhone 17 Pro"
            osVersion: "26.0"
            download-platform: "true"
            use-xcbeautify: "true"
            xcbeautify-renderer: "azure-devops-pipelines"
            skip-package-resolved: "true"

          - type: watchos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "11.5"
            skip-package-resolved: "true"

          - type: watchos
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "Apple Watch Ultra 3 (49mm)"
            osVersion: "26.0"
            download-platform: "true"
            use-xcbeautify: "true"
            xcbeautify-renderer: "github-actions"
            skip-package-resolved: "true"

          - type: visionos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple Vision Pro"
            osVersion: "2.5"
            skip-package-resolved: "true"

          - type: tvos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "18.5"
            skip-package-resolved: "true"

          - type: tvos
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "26.0"
            download-platform: "true"
            use-xcbeautify: "true"
            skip-package-resolved: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/SingleTargetPackage
          scheme: SingleTargetPackage
          type: ${{ matrix.type }}
          xcode: ${{ matrix.xcode }}
          deviceName: ${{ matrix.deviceName }}
          osVersion: ${{ matrix.osVersion }}
          download-platform: ${{ matrix['download-platform'] || 'false' }}
          use-xcbeautify: ${{ matrix['use-xcbeautify'] }}
          xcbeautify-renderer: ${{ matrix['xcbeautify-renderer'] }}
          skip-package-resolved: ${{ matrix['skip-package-resolved'] || 'false' }}

  test-multi-target-macos:
    name: Test Multi-Target Package (macOS)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          # SPM Build Matrix
          - runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            use-xcbeautify: "true"
            xcbeautify-renderer: "github-actions"
            skip-package-resolved: "true"

          # macOS Build Matrix
          - type: macos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            use-xcbeautify: "true"
            skip-package-resolved: "true"

          # iOS Build Matrix
          - type: ios
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "iPhone 16 Pro"
            osVersion: "18.5"
            use-xcbeautify: "true"
            xcbeautify-renderer: "github-actions"
            skip-package-resolved: "true"

          - type: ios
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "iPhone 16 Pro"
            osVersion: "18.5"
            download-platform: "true"
            use-xcbeautify: "true"
            xcbeautify-renderer: "azure-devops-pipelines"
            skip-package-resolved: "true"

          - type: watchos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "11.5"
            skip-package-resolved: "true"

          - type: watchos
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "Apple Watch Ultra 2 (49mm)"
            osVersion: "11.5"
            download-platform: "true"
            use-xcbeautify: "true"
            xcbeautify-renderer: "github-actions"
            skip-package-resolved: "true"

          - type: visionos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple Vision Pro"
            osVersion: "2.5"
            skip-package-resolved: "true"

          - type: tvos
            runs-on: macos-15
            xcode: "/Applications/Xcode_16.4.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "18.5"
            skip-package-resolved: "true"

          - type: tvos
            runs-on: macos-15
            xcode: "/Applications/Xcode_26.0.app"
            deviceName: "Apple TV 4K (3rd generation)"
            osVersion: "26.0"
            download-platform: "true"
            use-xcbeautify: "true"
            skip-package-resolved: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/MultiTargetPackage
          scheme: MultiTargetPackage-Package
          type: ${{ matrix.type }}
          xcode: ${{ matrix.xcode }}
          deviceName: ${{ matrix.deviceName }}
          osVersion: ${{ matrix.osVersion }}
          download-platform: ${{ matrix['download-platform'] || 'false' }}
          use-xcbeautify: ${{ matrix['use-xcbeautify'] }}
          xcbeautify-renderer: ${{ matrix['xcbeautify-renderer'] }}
          skip-package-resolved: ${{ matrix['skip-package-resolved'] || 'false' }}

  test-single-target-ubuntu:
    name: Test Single Target Package (Ubuntu)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift:
          - "5.9"
          - "5.10"
          - "6.0"
          - "6.1"
          - "6.2"
        ubuntu:
          - jammy
          - focal
          - noble
        nightly:
          - false
          - true
        exclude:
          - swift: 5.9
            ubuntu: noble
          - swift: 5.9
            nightly: true
          - swift: 5.10
            nightly: true
          - swift: 6.0
            nightly: true
          - swift: 6.2
            nightly: false
    container:
      image: ${{ matrix.nightly && format('swiftlang/swift:nightly-{0}-{1}', matrix.swift, matrix.ubuntu) || format('swift:{0}-{1}', matrix.swift, matrix.ubuntu) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/SingleTargetPackage
          scheme: SingleTargetPackage
          use-xcbeautify: "true"
          skip-package-resolved: "true" 

  test-multi-target-ubuntu:
    name: Test Multi-Target Package (Ubuntu)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift:
          - "5.9"
          - "5.10"
          - "6.0"
          - "6.1"
          - "6.2"
        ubuntu:
          - jammy
          - focal
          - noble
        nightly:
          - false
          - true
        exclude:
          - swift: 5.9
            ubuntu: noble
          - swift: 5.9
            nightly: true
          - swift: 5.10
            nightly: true
          - swift: 6.0
            nightly: true
          - swift: 6.2
            nightly: false
    container:
      image: ${{ matrix.nightly && format('swiftlang/swift:nightly-{0}-{1}', matrix.swift, matrix.ubuntu) || format('swift:{0}-{1}', matrix.swift, matrix.ubuntu) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/MultiTargetPackage
          scheme: MultiTargetPackage
          xcbeautify-renderer: "github-actions"
          skip-package-resolved: "true"
  test-single-target-windows:
    name: Test Single Target Package (Windows)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [windows-2022, windows-2025]
        include:
          - swift-version: swift-6.2-branch
            swift-build: 6.2-DEVELOPMENT-SNAPSHOT-2025-09-06-a
          - swift-version: swift-6.1-release
            swift-build: 6.1-RELEASE
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/SingleTargetPackage
          scheme: SingleTargetPackage
          windows-swift-version: ${{ matrix.swift-version }}
          windows-swift-build: ${{ matrix.swift-build }}
          use-xcbeautify: "true"
          skip-package-resolved: "true"

  test-multi-target-windows:
    name: Test Multi-Target Package (Windows)
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [windows-2022, windows-2025]
        include:
          - swift-version: swift-6.2-branch
            swift-build: 6.2-DEVELOPMENT-SNAPSHOT-2025-09-06-a
          - swift-version: swift-6.1-release
            swift-build: 6.1-RELEASE
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          working-directory: test/MultiTargetPackage
          scheme: MultiTargetPackage-Package
          windows-swift-version: ${{ matrix.swift-version }}
          windows-swift-build: ${{ matrix.swift-build }}
          use-xcbeautify: "true"
          skip-package-resolved: "true"

  # Test strict mode behavior: Should FAIL when Package.resolved is missing and skip-package-resolved=false
  test-strict-mode-missing-resolved:
    name: Test Strict Mode (Should Fail)
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - name: Run action (expect failure)
        id: test
        continue-on-error: true
        uses: ./
        with:
          working-directory: test/SingleTargetPackage
          scheme: SingleTargetPackage
          xcode: "/Applications/Xcode_16.4.app"
          skip-package-resolved: "false"  # Strict mode: requires Package.resolved
      - name: Verify failure
        if: steps.test.outcome != 'failure'
        run: |
          echo "ERROR: Action should have failed when Package.resolved is missing and skip-package-resolved=false"
          exit 1
      - name: Verify error message
        if: steps.test.outcome == 'failure'
        run: |
          echo "SUCCESS: Action correctly failed in strict mode without Package.resolved"

  # Test strict mode behavior: Should SUCCEED when Package.resolved exists and skip-package-resolved=false
  test-strict-mode-with-resolved:
    name: Test Strict Mode (Should Succeed)
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - name: Create Package.resolved
        working-directory: test/SingleTargetPackage
        run: |
          # Create a minimal Package.resolved file
          cat > Package.resolved <<'EOF'
          {
            "originHash" : "test-hash-123",
            "pins" : [],
            "version" : 3
          }
          EOF
      - name: Run action (expect success)
        uses: ./
        with:
          working-directory: test/SingleTargetPackage
          scheme: SingleTargetPackage
          xcode: "/Applications/Xcode_16.4.app"
          skip-package-resolved: "false"  # Strict mode: uses Package.resolved
      - name: Verify --force-resolved-versions was used
        working-directory: test/SingleTargetPackage
        run: |
          echo "SUCCESS: Action correctly used Package.resolved in strict mode" 
